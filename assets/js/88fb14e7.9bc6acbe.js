"use strict";(self.webpackChunk_nx_dotnet_source=self.webpackChunk_nx_dotnet_source||[]).push([[730],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(g,l(l({ref:t},c),{},{components:r})):n.createElement(g,l({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8592:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),l=["components"],i={},s="@nx-dotnet/core:library",p={unversionedId:"core/Generators/library",id:"core/Generators/library",title:"@nx-dotnet/core:library",description:"NxDotnet Library Generator",source:"@site/../../docs/core/Generators/library.md",sourceDirName:"core/Generators",slug:"/core/Generators/library",permalink:"/docs/core/Generators/library",draft:!1,editUrl:"https://github.com/nx-dotnet/nx-dotnet/edit/master/docs/../../docs/core/Generators/library.md",tags:[],version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"@nx-dotnet/core:application",permalink:"/docs/core/Generators/application"},next:{title:"@nx-dotnet/core:move",permalink:"/docs/core/Generators/move"}},c={},u=[{value:"NxDotnet Library Generator",id:"nxdotnet-library-generator",level:2},{value:"Options",id:"options",level:2},{value:'<span className="required">name</span>',id:"name",level:3},{value:"tags",id:"tags",level:3},{value:"directory",id:"directory",level:3},{value:"template",id:"template",level:3},{value:'<span className="required">language</span>',id:"language",level:3},{value:'<span className="required">testTemplate</span>',id:"testtemplate",level:3},{value:"solutionFile",id:"solutionfile",level:3},{value:"skipSwaggerLib",id:"skipswaggerlib",level:3},{value:"pathScheme",id:"pathscheme",level:3},{value:"args",id:"args",level:3}],d={toc:u},m="wrapper";function g(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nx-dotnetcorelibrary"},"@nx-dotnet/core:library"),(0,o.kt)("h2",{id:"nxdotnet-library-generator"},"NxDotnet Library Generator"),(0,o.kt)("p",null,"Generate a dotnet project under the library directory."),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("h3",{id:"name"},(0,o.kt)("span",{className:"required"},"name")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): The name assigned to the library")),(0,o.kt)("h3",{id:"tags"},"tags"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): Add tags to the project (used for linting)")),(0,o.kt)("h3",{id:"directory"},"directory"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): A directory where the project is placed")),(0,o.kt)("h3",{id:"template"},"template"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): The template to instantiate when the command is invoked. Each template might have specific options you can pass.")),(0,o.kt)("h3",{id:"language"},(0,o.kt)("span",{className:"required"},"language")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): Which language should the project use?")),(0,o.kt)("h3",{id:"testtemplate"},(0,o.kt)("span",{className:"required"},"testTemplate")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): Which template should be used for creating the tests project?")),(0,o.kt)("h3",{id:"solutionfile"},"solutionFile"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"(string): The name of the solution file to add the project to")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"(boolean): Should the project be added to the default solution file?"))),(0,o.kt)("h3",{id:"skipswaggerlib"},"skipSwaggerLib"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(boolean): By default, if using webapi template, an additional library is scaffolded for swagger files. This skips that setup.")),(0,o.kt)("h3",{id:"pathscheme"},"pathScheme"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): Determines if the project should follow NX or dotnet path naming conventions")),(0,o.kt)("h3",{id:"args"},"args"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(array): Additional arguments to pass to the dotnet command. For example: ",'"',"nx g @nx-dotnet/core:app myapp --args=","'","--no-restore","'",'"'," Arguments can also be appended to the end of the command using ","'","--","'",". For example, ","'","nx g @nx-dotnet/core:app myapp -- --no-restore","'",".")))}g.isMDXComponent=!0}}]);