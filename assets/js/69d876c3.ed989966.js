"use strict";(self.webpackChunk_nx_dotnet_source=self.webpackChunk_nx_dotnet_source||[]).push([[414],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(r),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return r?n.createElement(m,l(l({ref:t},u),{},{components:r})):n.createElement(m,l({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6295:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),l=["components"],i={},s="@nx-dotnet/core:test",c={unversionedId:"core/Generators/test",id:"core/Generators/test",title:"@nx-dotnet/core:test",description:"NxDotnet Test Generator",source:"@site/../../docs/core/Generators/test.md",sourceDirName:"core/Generators",slug:"/core/Generators/test",permalink:"/docs/core/Generators/test",draft:!1,editUrl:"https://github.com/nx-dotnet/nx-dotnet/edit/master/docs/../../docs/core/Generators/test.md",tags:[],version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"@nx-dotnet/core:sync",permalink:"/docs/core/Generators/sync"},next:{title:"Configuration",permalink:"/docs/core/configuration"}},u={},p=[{value:"NxDotnet Test Generator",id:"nxdotnet-test-generator",level:2},{value:"Options",id:"options",level:2},{value:'<span className="required">name</span>',id:"name",level:3},{value:'<span className="required">testTemplate</span>',id:"testtemplate",level:3},{value:"language",id:"language",level:3},{value:"suffix",id:"suffix",level:3},{value:"solutionFile",id:"solutionfile",level:3},{value:"pathScheme",id:"pathscheme",level:3}],d={toc:p},f="wrapper";function m(e){var t=e.components,r=(0,o.Z)(e,l);return(0,a.kt)(f,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nx-dotnetcoretest"},"@nx-dotnet/core:test"),(0,a.kt)("h2",{id:"nxdotnet-test-generator"},"NxDotnet Test Generator"),(0,a.kt)("p",null,"Generate a .NET test project for an existing application or library"),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("h3",{id:"name"},(0,a.kt)("span",{className:"required"},"name")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"(string): The existing project to generate tests for")),(0,a.kt)("h3",{id:"testtemplate"},(0,a.kt)("span",{className:"required"},"testTemplate")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"(string): Which template should be used for creating the tests project?")),(0,a.kt)("h3",{id:"language"},"language"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"(string): Which language should the project use?")),(0,a.kt)("h3",{id:"suffix"},"suffix"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"(string): What suffix should be used for the tests project name?")),(0,a.kt)("h3",{id:"solutionfile"},"solutionFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"(string): The name of the solution file to add the project to")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"(boolean): Should the project be added to the default solution file?"))),(0,a.kt)("h3",{id:"pathscheme"},"pathScheme"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"(string): Determines if the project should follow NX or dotnet path naming conventions")))}m.isMDXComponent=!0}}]);