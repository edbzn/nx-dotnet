"use strict";(self.webpackChunk_nx_dotnet_source=self.webpackChunk_nx_dotnet_source||[]).push([[969],{3905:(e,t,r)=>{r.d(t,{Zo:()=>g,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),i=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},g=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),d=i(r),u=n,f=d["".concat(c,".").concat(u)]||d[u]||p[u]||o;return r?a.createElement(f,l(l({ref:t},g),{},{components:r})):a.createElement(f,l({ref:t},g))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:n,l[1]=s;for(var i=2;i<o;i++)l[i]=r[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4025:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>g,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),l=["components"],s={},c="@nx-dotnet/core:add-swagger-target",i={unversionedId:"core/Generators/add-swagger-target",id:"core/Generators/add-swagger-target",title:"@nx-dotnet/core:add-swagger-target",description:"Swagger Target Generator",source:"@site/../../docs/core/Generators/add-swagger-target.md",sourceDirName:"core/Generators",slug:"/core/Generators/add-swagger-target",permalink:"/docs/core/Generators/add-swagger-target",draft:!1,editUrl:"https://github.com/nx-dotnet/nx-dotnet/edit/master/docs/../../docs/core/Generators/add-swagger-target.md",tags:[],version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"@nx-dotnet/core:update-swagger",permalink:"/docs/core/Executors/update-swagger"},next:{title:"@nx-dotnet/core:application",permalink:"/docs/core/Generators/application"}},g={},d=[{value:"Swagger Target Generator",id:"swagger-target-generator",level:2},{value:"Options",id:"options",level:2},{value:"swaggerDoc",id:"swaggerdoc",level:3},{value:"startupAssembly",id:"startupassembly",level:3},{value:'<span className="required">project</span>',id:"project",level:3},{value:"target",id:"target",level:3},{value:"swaggerProject",id:"swaggerproject",level:3},{value:"codegenProject",id:"codegenproject",level:3},{value:"useNxPluginOpenAPI",id:"usenxpluginopenapi",level:3}],p={toc:d},u="wrapper";function f(e){var t=e.components,r=(0,n.Z)(e,l);return(0,o.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nx-dotnetcoreadd-swagger-target"},"@nx-dotnet/core:add-swagger-target"),(0,o.kt)("h2",{id:"swagger-target-generator"},"Swagger Target Generator"),(0,o.kt)("p",null,"Add a swagger target to a webapi based project to extract swagger.json into a newly generated library project. Optionally, also creates a project for code generation of the extracted swagger specification."),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("h3",{id:"swaggerdoc"},"swaggerDoc"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): Which version of the swagger spec should be used?")),(0,o.kt)("h3",{id:"startupassembly"},"startupAssembly"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): Path from workspace root to the built api","&","#39;s startup dll file. If null, will be auto-discovered.")),(0,o.kt)("h3",{id:"project"},(0,o.kt)("span",{className:"required"},"project")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): Which project should the target be added to?")),(0,o.kt)("h3",{id:"target"},"target"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): What should the swagger target be called?")),(0,o.kt)("h3",{id:"swaggerproject"},"swaggerProject"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): What should the swagger project be called?")),(0,o.kt)("h3",{id:"codegenproject"},"codegenProject"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(string): What should the codegen project be called? If null, the project will not be created.")),(0,o.kt)("h3",{id:"usenxpluginopenapi"},"useNxPluginOpenAPI"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(boolean): If the codegen project is to be created, should the codegen target use nx-plugin-openapi instead? Choose false if only type interfaces are needed.")))}f.isMDXComponent=!0}}]);